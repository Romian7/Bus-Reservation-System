# -*- coding: utf-8 -*-
"""Wilson.Romian-PythonCode-ITT103-F2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o5Isj-JS4aH8HiYOrk06j2LNi5Oe9PHZ
"""

# Author : Romian Wilson
# Date Created : December 9, 2023
# Course : ITT103
# Purpose : Bus booking system for trip reservations in various categories.

# Declare a variable for seat specifications
seats = [[0] * 2 for _ in range(122)]

# Declare user choice, row, and seatCount
userChoice = ""
row = 0
seatCount = 0

# Function to display different classifications of seats
def print_options():
    print("UCC Signature Express Limited\nComfort While You Travel\nReservation Options:")
    print("First Class (F/f)\nBusiness Class (B/b)\nEconomy Class (E/e)\nQuit or Cancel (Q/q)")
    print("Please select an option:")

# Function to check if the seat is already reserved and assign a seat if not
def assign_seat(row):
    global seatCount
    print("Do you want to reserve a window seat?\nYes - y\nNo - n")
    option = input().lower()

    # Separate logic for column 0 and column 1
    if option == "y":
        if not seats[row][1]:
            seats[row][1] = row + row
            print(f"Reserving seat: row {row}, column {row + 1}")
            seatCount += 1
        else:
            print("This seat is already reserved!")
    else:
        if not seats[row][0]:
            seats[row][0] = row
            print(f"Reserving seat: row {row}, column 0")
            seatCount += 1
        else:
            print("This seat is already reserved!")

# Function to ensure the user selects the correct row for the seat classification
def check_row(classification, row_num):
    if row_num > 0:
        if classification == "f" and 1 <= row_num <= 27:
            return True
        elif classification == "b" and 28 <= row_num <= 65:
            return True
        elif classification == "e" and 66 <= row_num <= 121:
            return True
        else:
            print("Invalid row number for the chosen class!")
    else:
        print("Number must be positive and greater than zero!")
    return False

# Function to print the seating option and allow the user to select
def select_seat():
    global userChoice, row
    userChoice = input().lower()
    if userChoice in ["f", "b", "e"]:
        print(f"Select Row Between {1 if userChoice == 'f' else 28 if userChoice == 'b' else 66} to {27 if userChoice == 'f' else 65 if userChoice == 'b' else 121}")
        row = int(input())
        if check_row(userChoice, row):
            assign_seat(row)
    else:
        print("Invalid choice!")

# Main function that controls the flow of the program
def init():
    global userChoice, seatCount
    userChoice = None
    while userChoice != "q":
        print_options()
        if userChoice != "q":
            select_seat()
        if seatCount > 120:
            print("No more available seats!")

# First function to execute when the program begins
init()